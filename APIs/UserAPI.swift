//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Get courses by person Id
     
     - parameter userId: (path) ID of the person 
     - parameter startDatetime: (query) optional start datetime (optional)
     - parameter endDatetime: (query) optional end datetime (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoursesByuserId(userId: String, startDatetime: String? = nil, endDatetime: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        getCoursesByuserIdWithRequestBuilder(userId: userId, startDatetime: startDatetime, endDatetime: endDatetime).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Get courses by person Id
     - GET /user/{userId}/courses/list
     - Get courses by person Id
     
     - parameter userId: (path) ID of the person 
     - parameter startDatetime: (query) optional start datetime (optional)
     - parameter endDatetime: (query) optional end datetime (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getCoursesByuserIdWithRequestBuilder(userId: String, startDatetime: String? = nil, endDatetime: String? = nil) -> RequestBuilder<Void> {
        var path = "/user/{userId}/courses/list"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "startDatetime": startDatetime, 
            "endDatetime": endDatetime
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get user by course Id
     
     - parameter courseId: (path) ID of course where users need to be called 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersByCourseId(courseId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        getUsersByCourseIdWithRequestBuilder(courseId: courseId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Get user by course Id
     - GET /courses/{courseId}/users/list
     - Get user by course Id
     
     - parameter courseId: (path) ID of course where users need to be called 

     - returns: RequestBuilder<Void> 
     */
    open class func getUsersByCourseIdWithRequestBuilder(courseId: String) -> RequestBuilder<Void> {
        var path = "/courses/{courseId}/users/list"
        path = path.replacingOccurrences(of: "{courseId}", with: "\(courseId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
